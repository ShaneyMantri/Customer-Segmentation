ggplot(customer_data,aes(Annual.Income..k..))+
geom_density(fill="olivedrab2")
ggplot(customer_data,aes(Annual.Income..k..))+
geom_density(fill="navyblue")
ggplot(customer_data, aes(Annual.Income..k..))+
geom_histogram(col="black", fill="salmon")+
scale_x_continuous(breaks = seq(0,150,5))
ggplot(customer_data, aes(Annual.Income..k..))+
geom_histogram(col="black", fill="salmon")
hist(customer_data$Annual.Income..k..,
col="salmon",
main="Histogram for Annual Income",
xlab="Annual Income Class",
ylab="Frequency",
labels=TRUE)
ggplot(customer_data, aes(Annual.Income..k..))+
geom_histogram(col="black", fill="salmon")+
scale_x_continuous(breaks = seq(0,120,5))
ggplot(customer_data, aes(Annual.Income..k..))+
geom_histogram(col="black", fill="salmon")+
scale_x_continuous(breaks = seq(0,135,5))
ggplot(customer_data, aes(Annual.Income..k..))+
geom_histogram(col="black", fill="salmon")+
scale_x_continuous(breaks = seq(0,137,10))
library(reshape2)
library(Hmisc)
cut2
cut2(customer_data$Annual.Income..k.., g=5)
levels( cut2(customer_data$Annual.Income..k.., g=5))
a = as.factor(levels( cut2(customer_data$Annual.Income..k.., g=5)))
a
dummy = customer_data %>%
group_by(customer_data$Annual.Income..k.., a)
dummy = data.frame(customer_data)
dummy
dummy$a = a
dummy
dummy = dummy[,-6]
dummy
dummy$quantile = a
dummy
dummyvar = dummy %>%
group_by(quantile) %>%
summarise(Total=n())
dummyvar
rm(dummy, dummyvar, a)
hist(customer_data$Annual.Income..k..,
col="salmon",
main="Histogram for Annual Income",
xlab="Annual Income Class",
ylab="Frequency",
labels=TRUE)
summary(customer_data$Spending.Score..1.100.)
boxplot(customer_data$Spending.Score..1.100.,
horizontal=TRUE,
col="#990000",
main="BoxPlot for Descriptive Analysis of Spending Score")
boxplot(customer_data$Spending.Score..1.100., col="#990000", main="BoxPlot for Descriptive Analysis of Spending Score")
boxplot(customer_data$Spending.Score..1.100., main="BoxPlot for Descriptive Analysis of Spending Score")
boxplot(customer_data$Spending.Score..1.100., col="#010101", main="BoxPlot for Descriptive Analysis of Spending Score")
boxplot(customer_data$Spending.Score..1.100., col="#01010F", main="BoxPlot for Descriptive Analysis of Spending Score")
boxplot(customer_data$Spending.Score..1.100., col="#99FFFF", main="BoxPlot for Descriptive Analysis of Spending Score")
boxplot(customer_data$Spending.Score..1.100., col="#99FFEE", main="BoxPlot for Descriptive Analysis of Spending Score")
boxplot(customer_data$Spending.Score..1.100., col="#99FF00", main="BoxPlot for Descriptive Analysis of Spending Score")
hist(customer_data$Spending.Score..1.100.,
main="HistoGram for Spending Score",
xlab="Spending Score Class",
ylab="Frequency",
col="#6600cc",
labels=TRUE)
hist(customer_data$Spending.Score..1.100.,
main="HistoGram for Spending Score",
xlab="Spending Score Class",
ylab="Frequency",
col="salmon",
labels=TRUE)
library(tidyverse)
library(plotrix)
library(reshape2)
library(Hmisc)
library(purrr)
set.seed(123)
# function to calculate total intra-cluster sum of square
iss <- function(k) {
kmeans(customer_data[,3:5],k,iter.max=100,nstart=100,algorithm="Lloyd" )$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
plot(k.values, iss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
type="b", pch = 19,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
type="b", pch = 19,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
type="i", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
type="s", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
type="l", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
plot(k.values, iss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
iss_values
k.values
df = data.frame(k = k.values, iss = iss)
df
df = data.frame(k = k.values, iss = iss_values)
df
ggplot(df, aes(k, iss))+
geom_point()
ggplot(df, aes(k, iss))+
geom_point()+
geom_line()
df = data.frame(k = k.values, iss = iss_values)
ggplot(df, aes(k, iss))+
geom_point()+
geom_line()
ggplot(df, aes(k, iss))+
geom_point()+
geom_line()+
scale_x_continuous(breaks = seq(0,10,1))
library(cluster)
library(gridExtra)
library(grid)
k2 <- kmeans(customer_data[,3:5],k,iter.max=100,nstart=100,algorithm="Lloyd" )
k2 <- kmeans(customer_data[,3:5],2,iter.max=100,nstart=100,algorithm="Lloyd" )
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")))
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", title("Silhouette Plot"))
dev.off()
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", title("Silhouette Plot"))
k2 <- kmeans(customer_data[,3:5],2,iter.max=100,nstart=100,algorithm="Lloyd" )
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", title("Silhouette Plot"))
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width")
title("Silhouette Plot")
dev.off()
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k3 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
k3$cluster
k3 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s2<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k2 <- kmeans(customer_data[,3:5],2,iter.max=100,nstart=100,algorithm="Lloyd" )
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k3 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s3<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k4 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s4<-plot(silhouette(k4$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k5 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s5<-plot(silhouette(k5$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k6 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s6<-plot(silhouette(k6$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k7 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s7<-plot(silhouette(k7$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k8 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s8<-plot(silhouette(k8$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k9 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s9<-plot(silhouette(k9$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k10 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s10<-plot(silhouette(k10$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
pkgs <- c("factoextra",  "NbClust")
install.packages(pkgs)
library(factoextra)
library(NbClust)
fviz_nbclust(customer_data[,3:5], kmeans, method = "silhouette")
set.seed(125)
stat_gap <- clusGap(customer_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(stat_gap)
set.seed(125)
stat_gap <- clusGap(customer_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
library(purrr)
library(cluster)
library(gridExtra)
library(grid)
library(factoextra)
library(NbClust)
stat_gap <- clusGap(customer_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(stat_gap)
k6
fviz_nbclust(customer_data[,3:5], kmeans, method = "gap_stat")
fviz_nbclust(customer_data[,3:5], kmeans, method = "gap_stat")
fviz_nbclust(customer_data[,3:5], kmeans, method = "elbow")
fviz_nbclust(customer_data[,3:5], kmeans, method = "silhouette")
fviz_nbclust(customer_data[,3:5], kmeans, method = "wss")
set.seed(125)
fviz_nbclust(customer_data[,3:5], kmeans, method = "wss")
fviz_nbclust(customer_data[,3:5], kmeans, method = "silh")
fviz_nbclust(customer_data[,3:5], kmeans, method = "silhouette")
fviz_nbclust(customer_data[,3:5], kmeans, method = "wss")
fviz_nbclust(customer_data[,3:5], kmeans, method = "gap_stat")
pcclust=prcomp(customer_data[,3:5],scale=FALSE) #principal component analysis
summary(pcclust)
customer_data[,3:5]
pcclust=prcomp(customer_data[,3:5],scale=FALSE) #principal component analysis
summary(pcclust)
pcclust$rotation[,1:2]
plot(customer_data$Annual.Income..k.., customer_data$Spending.Score..1.100., col = as.factor(k6$cluster))
plot(customer_data$Annual.Income..k.., customer_data$Spending.Score..1.100., col = as.factor(k6$cluster), pch = 19)
as.factor(k6$cluster)
k2 <- kmeans(customer_data[,3:5],2,iter.max=100,nstart=100,algorithm="Lloyd" )
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k3 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s3<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k4 <- kmeans(customer_data[,3:5],4,iter.max=100,nstart=100,algorithm="Lloyd" )
s4<-plot(silhouette(k4$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k5 <- kmeans(customer_data[,3:5],5,iter.max=100,nstart=100,algorithm="Lloyd" )
s5<-plot(silhouette(k5$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k6 <- kmeans(customer_data[,3:5],6,iter.max=100,nstart=100,algorithm="Lloyd" )
s6<-plot(silhouette(k6$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k7 <- kmeans(customer_data[,3:5],7,iter.max=100,nstart=100,algorithm="Lloyd" )
s7<-plot(silhouette(k7$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k8 <- kmeans(customer_data[,3:5],8,iter.max=100,nstart=100,algorithm="Lloyd" )
s8<-plot(silhouette(k8$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k9 <- kmeans(customer_data[,3:5],9,iter.max=100,nstart=100,algorithm="Lloyd" )
s9<-plot(silhouette(k9$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k10 <- kmeans(customer_data[,3:5],10,iter.max=100,nstart=100,algorithm="Lloyd" )
s10<-plot(silhouette(k10$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
fviz_nbclust(customer_data[,3:5], kmeans, method = "wss")
fviz_nbclust(customer_data[,3:5], kmeans, method = "silhouette")
fviz_nbclust(customer_data[,3:5], kmeans, method = "gap_stat")
set.seed(125)
stat_gap <- clusGap(customer_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(stat_gap)
pcclust=prcomp(customer_data[,3:5],scale=FALSE) #principal component analysis
summary(pcclust)
pcclust$rotation[,1:2]
plot(customer_data$Annual.Income..k.., customer_data$Spending.Score..1.100., col = as.factor(k6$cluster), pch = 19)
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100. ))+
geom_point(col=as.factor(k6$cluster), pch=19)
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100. ))+
geom_point(col=as.factor(k6$cluster), pch=19, stat = "identity")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100. ))+
geom_point(col=as.factor(k6$cluster), stat = "identity")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_points()
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point()
stat = "identity"
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")
library(purrr)
library(cluster)
library(gridExtra)
library(grid)
library(factoextra)
library(NbClust)
set.seed(123)
# function to calculate total intra-cluster sum of square
iss <- function(k) {
kmeans(customer_data[,3:5],k,iter.max=100,nstart=100,algorithm="Lloyd" )$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
df = data.frame(k = k.values, iss = iss_values)
ggplot(df, aes(k, iss))+
geom_point()+
geom_line()+
scale_x_continuous(breaks = seq(0,10,1))
# Silhouette method
k2 <- kmeans(customer_data[,3:5],2,iter.max=100,nstart=100,algorithm="Lloyd" )
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k3 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s3<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k4 <- kmeans(customer_data[,3:5],4,iter.max=100,nstart=100,algorithm="Lloyd" )
s4<-plot(silhouette(k4$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k5 <- kmeans(customer_data[,3:5],5,iter.max=100,nstart=100,algorithm="Lloyd" )
s5<-plot(silhouette(k5$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k6 <- kmeans(customer_data[,3:5],6,iter.max=100,nstart=100,algorithm="Lloyd" )
s6<-plot(silhouette(k6$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k7 <- kmeans(customer_data[,3:5],7,iter.max=100,nstart=100,algorithm="Lloyd" )
s7<-plot(silhouette(k7$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k8 <- kmeans(customer_data[,3:5],8,iter.max=100,nstart=100,algorithm="Lloyd" )
s8<-plot(silhouette(k8$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k9 <- kmeans(customer_data[,3:5],9,iter.max=100,nstart=100,algorithm="Lloyd" )
s9<-plot(silhouette(k9$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k10 <- kmeans(customer_data[,3:5],10,iter.max=100,nstart=100,algorithm="Lloyd" )
s10<-plot(silhouette(k10$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
#FVIZ_NBCLUST FOR APPROPRIATE NUMBER OF CLUSTERS
fviz_nbclust(customer_data[,3:5], kmeans, method = "wss")
fviz_nbclust(customer_data[,3:5], kmeans, method = "silhouette")
fviz_nbclust(customer_data[,3:5], kmeans, method = "gap_stat")
# GAP STATISTIC
set.seed(125)
stat_gap <- clusGap(customer_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(stat_gap)
#PRINCIPAL COMPONENT ANALYSIS
pcclust=prcomp(customer_data[,3:5],scale=FALSE) #principal component analysis
summary(pcclust)
pcclust$rotation[,1:2]
#Plotting clusters
plot(customer_data$Annual.Income..k.., customer_data$Spending.Score..1.100., col = as.factor(k6$cluster), pch = 19)
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")
library(purrr)
library(cluster)
library(gridExtra)
library(grid)
library(factoextra)
library(NbClust)
set.seed(123)
# function to calculate total intra-cluster sum of square
iss <- function(k) {
kmeans(customer_data[,3:5],k,iter.max=100,nstart=100,algorithm="Lloyd" )$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
df = data.frame(k = k.values, iss = iss_values)
ggplot(df, aes(k, iss))+
geom_point()+
geom_line()+
scale_x_continuous(breaks = seq(0,10,1))
# Silhouette method
k2 <- kmeans(customer_data[,3:5],2,iter.max=100,nstart=100,algorithm="Lloyd" )
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k3 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s3<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k4 <- kmeans(customer_data[,3:5],4,iter.max=100,nstart=100,algorithm="Lloyd" )
s4<-plot(silhouette(k4$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k5 <- kmeans(customer_data[,3:5],5,iter.max=100,nstart=100,algorithm="Lloyd" )
s5<-plot(silhouette(k5$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k6 <- kmeans(customer_data[,3:5],6,iter.max=100,nstart=100,algorithm="Lloyd" )
s6<-plot(silhouette(k6$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k7 <- kmeans(customer_data[,3:5],7,iter.max=100,nstart=100,algorithm="Lloyd" )
s7<-plot(silhouette(k7$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k8 <- kmeans(customer_data[,3:5],8,iter.max=100,nstart=100,algorithm="Lloyd" )
s8<-plot(silhouette(k8$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k9 <- kmeans(customer_data[,3:5],9,iter.max=100,nstart=100,algorithm="Lloyd" )
s9<-plot(silhouette(k9$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k10 <- kmeans(customer_data[,3:5],10,iter.max=100,nstart=100,algorithm="Lloyd" )
s10<-plot(silhouette(k10$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
#FVIZ_NBCLUST FOR APPROPRIATE NUMBER OF CLUSTERS
fviz_nbclust(customer_data[,3:5], kmeans, method = "wss")
fviz_nbclust(customer_data[,3:5], kmeans, method = "silhouette")
fviz_nbclust(customer_data[,3:5], kmeans, method = "gap_stat")
# GAP STATISTIC
set.seed(125)
stat_gap <- clusGap(customer_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(stat_gap)
#PRINCIPAL COMPONENT ANALYSIS
pcclust=prcomp(customer_data[,3:5],scale=FALSE) #principal component analysis
summary(pcclust)
pcclust$rotation[,1:2]
#Plotting clusters
plot(customer_data$Annual.Income..k.., customer_data$Spending.Score..1.100., col = as.factor(k6$cluster), pch = 19)
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")
library(purrr)
library(cluster)
library(gridExtra)
library(grid)
library(factoextra)
library(NbClust)
set.seed(123)
# function to calculate total intra-cluster sum of square
iss <- function(k) {
kmeans(customer_data[,3:5],k,iter.max=100,nstart=100,algorithm="Lloyd" )$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
df = data.frame(k = k.values, iss = iss_values)
ggplot(df, aes(k, iss))+
geom_point()+
geom_line()+
scale_x_continuous(breaks = seq(0,10,1))
# Silhouette method
k2 <- kmeans(customer_data[,3:5],2,iter.max=100,nstart=100,algorithm="Lloyd" )
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k3 <- kmeans(customer_data[,3:5],3,iter.max=100,nstart=100,algorithm="Lloyd" )
s3<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k4 <- kmeans(customer_data[,3:5],4,iter.max=100,nstart=100,algorithm="Lloyd" )
s4<-plot(silhouette(k4$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k5 <- kmeans(customer_data[,3:5],5,iter.max=100,nstart=100,algorithm="Lloyd" )
s5<-plot(silhouette(k5$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k6 <- kmeans(customer_data[,3:5],6,iter.max=100,nstart=100,algorithm="Lloyd" )
s6<-plot(silhouette(k6$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k7 <- kmeans(customer_data[,3:5],7,iter.max=100,nstart=100,algorithm="Lloyd" )
s7<-plot(silhouette(k7$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k8 <- kmeans(customer_data[,3:5],8,iter.max=100,nstart=100,algorithm="Lloyd" )
s8<-plot(silhouette(k8$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k9 <- kmeans(customer_data[,3:5],9,iter.max=100,nstart=100,algorithm="Lloyd" )
s9<-plot(silhouette(k9$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
k10 <- kmeans(customer_data[,3:5],10,iter.max=100,nstart=100,algorithm="Lloyd" )
s10<-plot(silhouette(k10$cluster,dist(customer_data[,3:5],"euclidean")), xlab = "Silhoutte width", main = "Silhouette Plot")
#FVIZ_NBCLUST FOR APPROPRIATE NUMBER OF CLUSTERS
fviz_nbclust(customer_data[,3:5], kmeans, method = "wss")
fviz_nbclust(customer_data[,3:5], kmeans, method = "silhouette")
fviz_nbclust(customer_data[,3:5], kmeans, method = "gap_stat")
# GAP STATISTIC
set.seed(125)
stat_gap <- clusGap(customer_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(stat_gap)
#PRINCIPAL COMPONENT ANALYSIS
pcclust=prcomp(customer_data[,3:5],scale=FALSE) #principal component analysis
summary(pcclust)
pcclust$rotation[,1:2]
#Plotting clusters
plot(customer_data$Annual.Income..k.., customer_data$Spending.Score..1.100., col = as.factor(k6$cluster), pch = 19)
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")+
scale_color_discrete(name=" ",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")+
scale_color_discrete(name="Null ",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")+
scale_color_discrete(name="Legend",
breaks=c( "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")+
scale_color_discrete(name="Legend",
breaks=c( "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5",)) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")+
scale_color_discrete(name="Legend",
breaks=c( "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
,
"1
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")+
scale_color_discrete(name="Legend",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity")+
scale_color_discrete(name="Legend",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster), pch=19 ))+
geom_point(stat = "identity")+
scale_color_discrete(name="Legend",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity", pch=19)+
scale_color_discrete(name="Legend",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity", pch=10)+
scale_color_discrete(name="Legend",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity", pch=20)+
scale_color_discrete(name="Legend",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(Annual.Income..k.., Spending.Score..1.100., col=as.factor(k6$cluster) ))+
geom_point(stat = "identity",pch=19)+
scale_color_discrete(name="Legend",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Customers", subtitle = "Using K-means Clustering")
legend("bottomleft",unique(dignm),fill=unique(kCols(digCluster)))
kCols=function(vec){cols=rainbow (length (unique (vec)))
return (cols[as.numeric(as.factor(vec))])}
digCluster<-k6$cluster; dignm<-as.character(digCluster); # K-means clusters
plot(pcclust$x[,1:2], col =kCols(digCluster),pch =19,xlab ="K-means",ylab="classes")
legend("bottomleft",unique(dignm),fill=unique(kCols(digCluster)))
